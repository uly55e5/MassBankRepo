/*
 * MassBank Tool API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"archive/zip"
	"context"
	"crypto/tls"
	"encoding/json"
	"encoding/xml"
	"io"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/uly55e5/MassBankRepo/api-server/database"
	"github.com/uly55e5/MassBankRepo/api-server/massbank"
	"github.com/uly55e5/MassBankRepo/api-server/mberror"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
)

// DefaultApiService is a service that implements the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

type Tag struct {
	XMLName xml.Name
	Content []Tag  `xml:",any"`
	Value   string `xml:",chardata"`
	Attr    string `xml:",attr"`
	String  string `xml:",innerxml"`
}

type Xml struct {
	Items []Tag `xml:",any"`
}

func (s *DefaultApiService) UploadMzmlPost(ctx context.Context, filename string, file *os.File) (ImplResponse, error) {
	f, err := os.Open(file.Name())
	info, err := f.Stat()
	var data = make([]byte, info.Size())
	mberror.Check(err)
	n, err := f.Read(data)
	mberror.Check(err)
	println(n)
	var mz = Xml{}
	err = xml.Unmarshal(data, &mz)
	mberror.Check(err)
	id, err := database.InsertMzML(mz)
	if werr, ok := err.(mongo.WriteException); ok {
		msgs := []string{}
		for _, e := range werr.WriteErrors {
			msgs = append(msgs, e.Message)
		}
		js, _ := json.Marshal(struct{ Errors []string }{msgs})
		return Response(http.StatusConflict, string(js)), nil
	}
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	js, _ := json.Marshal(struct{ Id string }{id})
	return Response(http.StatusOK, string(js)), nil
}

func (s *DefaultApiService) SpectraRebuildgitPost(ctx context.Context) (ImplResponse, error) {
	tr := http.Transport{
		TLSClientConfig: &tls.Config{
			InsecureSkipVerify: true,
		},
	}
	c := http.Client{Transport: &tr}
	resp, err := c.Get("https://github.com/MassBank/MassBank-data/archive/refs/heads/main.zip")
	zipfile, err := os.Create("/tmp/git.zip")
	io.Copy(zipfile, resp.Body)
	r, err := zip.OpenReader("/tmp/git.zip")
	if err != nil {
		log.Panicln(err)
	}
	var count int64 = 0
	mberror.Check(database.ClearMassbankCollection())
	for _, fileheader := range r.File {
		if strings.HasSuffix(fileheader.Name, ".txt") {
			file, err := fileheader.Open()
			if mberror.Check(err) {
				continue
			}
			mb, err := massbank.ScanMbFile(file, fileheader.Name)
			if mberror.Check(err) {
				continue
			}
			count++
			_, err = database.InsertMassbank(mb)
			mberror.Check(err)
		}
	}
	js, _ := json.Marshal(struct{ Size int64 }{count})
	return Response(http.StatusOK, string(js)), nil
}

func (s *DefaultApiService) UploadMassbankPost(ctx context.Context, filename string, file *os.File) (ImplResponse, error) {
	mb, err := massbank.ParseFile(file.Name())
	id, err := database.InsertMassbank(mb)
	if werr, ok := err.(mongo.WriteException); ok {
		msgs := []string{}
		for _, e := range werr.WriteErrors {
			msgs = append(msgs, e.Message)
		}
		js, _ := json.Marshal(struct{ Errors []string }{msgs})
		return Response(http.StatusConflict, string(js)), nil
	}
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	js, _ := json.Marshal(struct{ Id string }{id})
	return Response(http.StatusOK, string(js)), nil
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// GetAllSpectra -
func (s *DefaultApiService) GetAllSpectra(ctx context.Context, limit int64, offset int64, page int64) (ImplResponse, error) {
	if limit < 1 {
		limit = 20
	}
	if page < 1 {
		page = 1
	}
	skip := offset + (page-1)*limit
	result, err := database.GetAllSpectra(skip, limit)
	if mberror.Check(err) {
		return Response(http.StatusInternalServerError, ""), err
	}
	return Response(http.StatusOK, result), nil
}

// GetAllSpectraInfo -
func (s *DefaultApiService) GetAllSpectraInfo(ctx context.Context, limit int64, offset int64, page int64) (ImplResponse, error) {
	if limit < 1 {
		limit = 20
	}
	if page < 1 {
		page = 1
	}
	skip := offset + (page-1)*limit
	data, err := database.GetSpectraInfo(skip, limit)
	if mberror.Check(err) {
		return Response(http.StatusInternalServerError, ""), err
	}
	count, err := database.Count()
	if mberror.Check(err) {
		return Response(http.StatusInternalServerError, ""), err
	}
	result := bson.M{"totalCount": count, "spectra": data}
	return Response(http.StatusOK, result), nil
}

// GetSpectrum -
func (s *DefaultApiService) GetSpectrum(ctx context.Context, accession string) (ImplResponse, error) {
	result, err := database.GetSpectrum(accession)
	if mberror.Check(err) {
		return Response(http.StatusInternalServerError, ""), err
	}
	return Response(http.StatusOK, result), nil
}
